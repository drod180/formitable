c
s
c
n
choices
c
choiceParams
choice_params
choice
c
choice
c
choices
cchoices
c
Field.find(field[:id])
field.class
field
field_params
c
field[1]
fields
field
c
n
c
field_params
c
n
field_params
c
field_params
field[1][:id]
field[1][6]
field[1]
c
self
self.fields
c
self.fields
self
c
@fields
c
fields
c
field[1]["id"]
field[1][:id]
field[1].id
field
c
fields
c
fields
c
field
c
field
c
fields
c
field
c
field
c
field
c
field[1]["type"]
field[1][type]
field[1]
field
c
field[1]
field
c
field
c
n
field
form.fields.new({type: field.type, label: "Untitled", form_rank_id: field.form_rank_id})
form
fields
c
params[:fields]
params
c
fields
c
field
c
n
fields.each do |field|
fields
c
params
c
params
c
params
forms_params
c
field_params
c
            DELETE /api/fields/:id(.:format) c
            PUT    /api/fields/:id(.:format)   api/fields#update {:format=>:json}
            PATCH  /api/fields/:id(.:format)   api/fields#update {:format=>:json}
  api_field GET    /api/fields/:id(.:format)   api/fields#show {:format=>:json}
            POST   /api/fields(.:format)       api/fields#create {:format=>:json}
ds GET    /api/fields(.:format)       api/fields#index {:format=>:json}
c
Form.try(find(params[:fields][:form_id]))
c
cc
c
user_params
c
user_params
@user
n
c
params[:user]c
flash[:errors]
c
params[:user][:email].include?('@')
params[:user][:email]
@user
